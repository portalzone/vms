# Define the path to the Vue project relative to the Dockerfile context
ARG VUE_DIR=vms-frontend/vue-project

# ----------------------------------------------------------------------
# STAGE 1: BUILD (For compiling Vue/Vite assets)
# ----------------------------------------------------------------------
FROM node:20-alpine AS frontend_builder

# Set the working directory inside the container to the root of the Vue project
# The WORKDIR will be /app/vms-frontend/vue-project
WORKDIR /app/${VUE_DIR}

# Copy package files (from host's VUE_DIR into container's WORKDIR)
COPY ${VUE_DIR}/package.json ./
COPY ${VUE_DIR}/package-lock.json ./

# Install Node dependencies (runs inside /app/vms-frontend/vue-project/)
# node_modules are ignored by .dockerignore, so this installs fresh dependencies
RUN npm install

# Copy the entire remaining Vue source code (src/, vite.config.js, etc.)
COPY ${VUE_DIR}/ ./

# Run the production build (Vite/Rollup)
# This generates the compiled assets in the 'dist' directory within the WORKDIR.
# This step should now succeed, as the local 'dist' is ignored.
RUN npm run build

# ----------------------------------------------------------------------
# STAGE 2: PRODUCTION (For running the Laravel/PHP application)
# ----------------------------------------------------------------------
FROM php:8.3-fpm-alpine AS final

# Install core PHP dependencies
RUN apk add --no-cache \
    nginx \
    $PHPIZE_DEPS \
    libzip-dev \
    libpng-dev \
    libxml2-dev \
    supervisor \
    # Install standard PHP extensions
    && docker-php-ext-install pdo_mysql opcache zip gd bcmath \
    && apk del $PHPIZE_DEPS

# Set the working directory to the Laravel root
WORKDIR /var/www/html

# Install Composer globally
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy only the necessary PHP files for dependency installation
COPY composer.json composer.lock ./

# Install Composer dependencies (only production dependencies)
RUN composer install --no-dev --optimize-autoloader

# Copy the entire Laravel application source code
# Note: The .dockerignore also prevents /vendor and /node_modules from coming here
COPY . .

# Copy the NGINX configuration file (assumed to be in .render/ as per previous guidance)
COPY .render/nginx.conf /etc/nginx/http.d/default.conf

# Copy the built Vue assets from the frontend_builder stage
# CRITICAL: Retrieve assets from the WORKDIR defined in STAGE 1, 
# and place them in Laravel's expected public path.
COPY --from=frontend_builder /app/${VUE_DIR}/dist/ /var/www/html/public/build/

# Set correct permissions for storage and cache directories
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache \
    && chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache

# Expose port 8000 for Render
EXPOSE 8000

# Combined start command using supervisord
CMD ["/bin/sh", "-c", "supervisord -c /etc/supervisord.conf"]

